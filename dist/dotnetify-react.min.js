var dotnetify="undefined"==typeof dotnetify?{}:dotnetify;!function(a){var b=window||global;if("object"==typeof exports&&"object"==typeof module){var c="undefined"!=typeof window?window.jQuery||require("./jquery-shim"):require("./jquery-shim");module.exports=a(require("react"),c,b,require("./no-jquery.signalR"))}else"function"==typeof define&&define.amd?define(["react","./jquery-shim","./no-jquery.signalR"],a):a(React,jQuery,b)}(function(a,b,c){function d(a,c,d){this.$vmId=a,this.$component=c,this.$vmArg=d&&d.vmArg,this.$headers=d&&d.headers,this.$exceptionHandler=d&&d.exceptionHandler,this.$requested=!1,this.$loaded=!1,this.$itemKey={};var e=d&&d.getState,f=d&&d.setState;e="function"==typeof e?e:function(){return c.state},f="function"==typeof f?f:function(a){c.setState(a)},c&&c.props&&c.props.hasOwnProperty("vmArg")&&(this.$vmArg=b.extend(this.$vmArg,c.props.vmArg)),this.State=function(a){return"undefined"==typeof a?e():f(a)};for(var g in dotnetify.react.plugins){var h=dotnetify.react.plugins[g];h.hasOwnProperty("$inject")&&h.$inject(this)}}return function(a,b,c){"use strict";function d(b,c){return function(){c.apply(b,a.makeArray(arguments))}}function e(b,c){var e,f,g,h,i;for(e in b)if(b.hasOwnProperty(e)){if(f=b[e],!f.hubName)continue;i=c?f.on:f.off;for(g in f.client)if(f.client.hasOwnProperty(g)){if(h=f.client[g],!a.isFunction(h))continue;i.call(f,g,d(f,h))}}}if("function"!=typeof a.signalR)throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.");var f=a.signalR;a.hubConnection.prototype.createHubProxies=function(){var b={};return this.starting(function(){e(b,!0),this._registerSubscribedHubs()}).disconnected(function(){e(b,!1)}),b.dotNetifyHub=this.createHubProxy("dotNetifyHub"),b.dotNetifyHub.client={},b.dotNetifyHub.server={dispose_VM:function(c){return b.dotNetifyHub.invoke.apply(b.dotNetifyHub,a.merge(["Dispose_VM"],a.makeArray(arguments)))},request_VM:function(c,d){return b.dotNetifyHub.invoke.apply(b.dotNetifyHub,a.merge(["Request_VM"],a.makeArray(arguments)))},update_VM:function(c,d){return b.dotNetifyHub.invoke.apply(b.dotNetifyHub,a.merge(["Update_VM"],a.makeArray(arguments)))}},b},f.hub=a.hubConnection(dotnetify.hubPath,{useDefaultPath:!1}),a.extend(f,f.hub.createHubProxies())}(b,c),dotnetify=b.extend(dotnetify,{hub:null,hubServerUrl:null,hubServer:b.connection.dotNetifyHub.server,hubOptions:{transport:["webSockets","longPolling"]},hubPath:"/signalr",debug:!0,debugFn:null,offline:!1,isOffline:!0,offlineTimeout:5e3,offlineCacheFn:null,_connectRetry:0,isConnected:function(){return b.connection.hub.state==b.signalR.connectionState.connected}}),dotnetify.react=b.extend(dotnetify.hasOwnProperty("react")?dotnetify.react:{},{version:"1.0.4-beta",viewModels:{},plugins:{},init:function(){var a=dotnetify.react,c=function(){for(var b in a.viewModels)a.viewModels[b].$requested||a.viewModels[b].$request()};if(null===dotnetify.hub){dotnetify.hubServerUrl&&(b.connection.hub.url=dotnetify.hubServerUrl);var d=b.connection.dotNetifyHub;d.client.response_VM=function(b,c){var e=a.viewModels.hasOwnProperty(b)?a.viewModels[b]:null,f=JSON.parse(c);if(f&&f.hasOwnProperty("ExceptionType")&&f.hasOwnProperty("Message")){var g={name:f.ExceptionType,message:f.Message};if(e&&"function"==typeof e.$exceptionHandler)return e.$exceptionHandler(g);throw console.error("["+b+"] "+g.name+": "+g.message),g}e?e.$update(c):d.server.dispose_VM(b)};var e=function(){var a="undefined"==typeof dotnetify.hubOptions?b.connection.hub.start():b.connection.hub.start(dotnetify.hubOptions);return a.done(function(){dotnetify._connectRetry=0,c()}).fail(function(a){console.error(a)}),setTimeout(function(){dotnetify.offline&&!dotnetify.isConnected()&&(c(),dotnetify.isOffline=!0,b(document).triggerHandler("offline",dotnetify.isOffline))},dotnetify.offlineTimeout),a};dotnetify.hub=e(),b.connection.hub.disconnected(function(){setTimeout(function(){dotnetify.hub=e()},5e3*dotnetify._connectRetry+500),dotnetify._connectRetry<3&&dotnetify._connectRetry++}),b.connection.hub.stateChanged(function(a){var c={0:"connecting",1:"connected",2:"reconnecting",4:"disconnected"};console.log("SignalR: "+c[a.newState]);var d=1!=a.newState;dotnetify.isOffline!=d&&(dotnetify.isOffline=d,b(document).triggerHandler("offline",dotnetify.isOffline))})}else dotnetify.isConnected()?dotnetify.hub.done(c):dotnetify.offline&&c()},connect:function(a,b,c){if(arguments.length<2)throw new Error("[dotNetify] Missing arguments. Usage: connect(vmId, component) ");if(arguments.length>3)throw new Error("[dotNetify] Deprecated parameters. New usage: connect(vmId, component [,{getState, setState, vmArg, headers, exceptionHandler}]) ");if(dotnetify.ssr){var e=c&&c.vmArg;return dotnetify.react.ssrConnect(a,b,e)}var f=dotnetify.react;return f.viewModels.hasOwnProperty(a)?console.error("Component is attempting to connect to an already active '"+a+"'.  If it's from a dismounted component, you must add vm.$destroy to componentWillUnmount()."):f.viewModels[a]=new d(a,b,c),f.init(),f.viewModels[a]},ssrConnect:function(a,e,f){null!=c.ssr&&c.ssr.hasOwnProperty(a)||console.error("Server-side rendering requires initial state in 'window.ssr."+a+"'.");var g=dotnetify.react,h=c.ssr[a],i=function(){return h},j=function(a){h=b.extend(h,a)},k=g.viewModels[a]=new d(a,e,i,j,f);return setTimeout(function(){k.$update(JSON.stringify(c.ssr[a]))},100),k}}),d.prototype.$destroy=function(){for(var a in dotnetify.react.plugins){var b=dotnetify.react.plugins[a];"function"==typeof b.$destroy&&b.$destroy.apply(this)}dotnetify.hubServer.dispose_VM(this.$vmId),delete dotnetify.react.viewModels[this.$vmId]},d.prototype.$dispatch=function(a){if(dotnetify.isConnected())try{dotnetify.hubServer.update_VM(this.$vmId,a),dotnetify.debug&&(console.log("["+this.$vmId+"] sent> "),console.log(a),null!=dotnetify.debugFn&&dotnetify.debugFn(this.$vmId,"sent",a))}catch(a){console.error(a)}},d.prototype.$dispatchListState=function(a){for(var b in a){var c=this.$itemKey[b];if(!c)return void console.error("["+this.$vmId+"] missing item key for '"+b+"'; add "+b+"_itemKey property to the view model.");var d=a[b];if(!d[c])return console.error("["+this.$vmId+"] couldn't dispatch data from '"+b+"' due to missing property '"+c+"'"),void console.error(d);for(var e in d)if(e!=c){var f={};f[b+".$"+d[c]+"."+e]=d[e],this.$dispatch(f)}this.$updateList(b,d)}},d.prototype.$preProcess=function(a){var b=this;for(var c in a){var d=/(.*)_add/.exec(c);if(null==d){var d=/(.*)_update/.exec(c);if(null==d){var d=/(.*)_remove/.exec(c);if(null==d){var d=/(.*)_itemKey/.exec(c);if(null==d);else{var e=d[1],f={};f[e]=a[c],b.$setItemKey(f),delete a[c]}}else{var e=d[1];if(Array.isArray(this.State()[e])){var g=this.$itemKey[e];null!=g?b.$removeList(e,function(b){return b[g]==a[c]}):console.error("["+this.$vmId+"] missing item key for '"+e+"'; add "+e+"_itemKey property to the view model.")}else console.error("["+this.$vmId+"] '"+e+"' is not found or not an array.");delete a[c]}}else{var e=d[1];Array.isArray(this.State()[e])?b.$updateList(e,a[c]):console.error("["+this.$vmId+"] '"+e+"' is not found or not an array."),delete a[c]}}else{var e=d[1];Array.isArray(this.State()[e])?b.$addList(e,a[c]):console.error("unable to resolve "+c),delete a[c]}}},d.prototype.$request=function(){dotnetify.isConnected()&&(dotnetify.hubServer.request_VM(this.$vmId,{$vmArg:this.$vmArg,$headers:this.$headers}),this.$requested=!0)},d.prototype.$update=function(a){dotnetify.debug&&(console.log("["+this.$vmId+"] received> "),console.log(JSON.parse(a)),null!=dotnetify.debugFn&&dotnetify.debugFn(this.$vmId,"received",JSON.parse(a)));var c=JSON.parse(a);this.$preProcess(c);var d=this.State();d=b.extend(d,c),this.State(d),this.$loaded||this.$onLoad()},d.prototype.$onLoad=function(){for(var a in dotnetify.react.plugins){var b=dotnetify.react.plugins[a];"function"==typeof b.$ready&&b.$ready.apply(this)}this.$loaded=!0},d.prototype.$setItemKey=function(a){this.$itemKey=a},d.prototype.$addList=function(a,b){var c=this.$itemKey[a];if(null!=c){if(!b.hasOwnProperty(c))return void console.error("["+this.$vmId+"] couldn't add item to '"+a+"' due to missing property '"+c+"'");var d=this.State()[a].filter(function(a){return a[c]==b[c]});if(d.length>0)return void console.error("["+this.$vmId+"] couldn't add item to '"+listName+"' because the key already exists")}var e=this.State()[a];e.push(b);var f={};f[a]=e,this.State(f)},d.prototype.$removeList=function(a,b){var c={};c[a]=this.State()[a].filter(function(a){return!b(a)}),this.State(c)},d.prototype.$updateList=function(a,c){var d=this.$itemKey[a];if(null!=d){if(!c.hasOwnProperty(d))return void console.error("["+this.$vmId+"] couldn't update item to '"+a+"' due to missing property '"+d+"'");var e={};e[a]=this.State()[a].map(function(a){return a[d]==c[d]?b.extend(a,c):a}),this.State(e)}else console.error("["+this.$vmId+"] missing item key for '"+listName+"'; add "+listName+"_itemKey property to the view model.")},dotnetify.react.Scope=a.createClass({displayName:"Scope",propTypes:{vm:a.PropTypes.string},contextTypes:{scoped:a.PropTypes.func},childContextTypes:{scoped:a.PropTypes.func.isRequired,connect:a.PropTypes.func.isRequired},scoped:function(a){var b=this.context.scoped?this.context.scoped(this.props.vm):this.props.vm;return b?b+"."+a:a},getChildContext:function(){var a=this;return{scoped:function(b){return a.scoped(b)},connect:function(b,d,e){return d.vmId=a.scoped(b),d.vm=dotnetify.react.connect(d.vmId,d,e),d.dispatch=function(a){return d.vm.$dispatch(a)},d.dispatchState=function(a){d.vm.State(a),d.vm.$dispatch(a)},c.vmStates?c.vmStates[d.vmId]:null}}},render:function(){return this.props.children}}),dotnetify});